# Day 3

## Init

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"}
])
```

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
data =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(&String.graphemes(&1))
```

## First part

```elixir
data
|> Enum.zip()
|> Enum.map(fn el ->
  el
  |> Tuple.to_list()
  |> Enum.frequencies()
end)
|> Enum.map(fn %{"0" => zeros, "1" => ones} ->
  if zeros > ones, do: {"0", "1"}, else: {"1", "0"}
end)
|> Enum.reduce({"", ""}, fn {gamma, epsilon}, {gamma_value, epsilon_value} ->
  {gamma_value <> gamma, epsilon_value <> epsilon}
end)
|> Tuple.to_list()
|> Enum.map(&(Integer.parse(&1, 2) |> elem(0)))
|> Enum.product()
```

## Second part

```elixir
defmodule Recur do
  def recur(_type, list, _pos) when length(list) === 1, do: Enum.at(list, 0)

  def recur(type, list, pos) do
    new_list =
      list
      |> Enum.filter(fn row ->
        Enum.at(row, pos) === bit(type, list, pos)
      end)

    recur(type, new_list, pos + 1)
  end

  defp bit(type, list, pos) do
    %{"0" => zeros, "1" => ones} =
      list
      |> Enum.zip()
      |> Enum.at(pos)
      |> Tuple.to_list()
      |> Enum.frequencies()

    case type do
      :oxygen -> if ones >= zeros, do: "1", else: "0"
      :co2 -> if zeros > ones, do: "1", else: "0"
    end
  end
end
```

```elixir
oxygen =
  Recur.recur(:oxygen, data, 0)
  |> List.to_string()
  |> Integer.parse(2)
  |> elem(0)

co2 =
  Recur.recur(:co2, data, 0)
  |> List.to_string()
  |> Integer.parse(2)
  |> elem(0)

oxygen * co2
```
