<!-- vim: syntax=markdown -->

# Day 8

## Init

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"}
])
```

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
data =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(&String.split(&1, " | ", trim: true))
  |> Enum.map(fn [pattern, output] -> {String.split(pattern, " "), String.split(output, " ")} end)
```

## First part

```elixir
data
|> Enum.map(fn {_, output} ->
  output
  |> Enum.filter(fn digit ->
    length =
      digit
      |> String.length()

    # 1, 7, 4, 8
    Enum.member?([2, 3, 4, 7], length)
  end)
end)
|> Enum.filter(fn digits ->
  digits
  |> Enum.count() > 0
end)
|> Enum.reduce(0, fn digits, acc ->
  Enum.count(digits) + acc
end)
```

## Second part

```elixir
data
|> Enum.map(fn {input, output} ->
  {Enum.map(input, &String.to_charlist(&1)), Enum.map(output, &String.to_charlist(&1))}
end)
|> Enum.map(fn {input, output} ->
  num1 = input |> Enum.find(&(length(&1) === 2))
  num4 = input |> Enum.find(&(length(&1) === 4))
  num7 = input |> Enum.find(&(length(&1) === 3))
  num8 = input |> Enum.find(&(length(&1) === 7))

  num9 = input |> Enum.find(fn item -> length(item) === 6 && length(item -- num4) === 2 end)
  num6 = input |> Enum.find(fn item -> length(item) === 6 && length(item -- num1) === 5 end)
  num0 = input |> Enum.find(fn item -> length(item) === 6 && item !== num6 && item !== num9 end)

  num3 = input |> Enum.find(fn item -> length(item) === 5 && length(item -- num1) === 3 end)
  num2 = input |> Enum.find(fn item -> length(item) === 5 && length(item -- num9) === 1 end)
  num5 = input |> Enum.find(fn item -> length(item) === 5 && item !== num3 && item !== num2 end)

  decode_table = [num0, num1, num2, num3, num4, num5, num6, num7, num8, num9]

  output
  |> Enum.map(fn output_digit ->
    decode_table
    |> Enum.find_index(fn input_digit ->
      Enum.sort(input_digit) === Enum.sort(output_digit)
    end)
  end)
  |> Enum.join()
  |> String.to_integer()
end)
|> Enum.sum()
```
